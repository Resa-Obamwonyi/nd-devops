version: 2.1
# Define a job to be invoked later in a workflow.
orbs:
  aws-cli: circleci/aws-cli@3.1

jobs:
  # create_infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Create Cloudformation stack"
  #         command: aws cloudformation deploy --template-file template.yml --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} --region us-east-1

  # # Exercise: Config and Deployment
  # configure_infrastructure: 
  #   docker:
  #     - image: python:3.11-rc-alpine
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["b1:ee:af:c7:56:17:9d:75:e3:ba:e5:af:71:22:6d:fe", "9c:1b:6f:04:67:e6:d9:2b:ea:93:89:92:ca:78:d2:0b"] 
  #     - run:
  #         name: Install Ansible
  #         command: apk add --update ansible
  #     - run:
  #         name: Run Playbook and Configure server
  #         command: |
  #           ansible-playbook -i inventory.txt main.yml

  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
              aws cloudformation deploy \
              --template-file bucket.yml \
              --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

  # Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
              aws cloudformation \
              list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
              --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt 

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
              aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name production-distro \
              --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  # Destroy the previous production version's S3 bucket and CloudFormation stack. 
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
        # Use $OldBucketID environment variable or mybucket644752792305 below.
        # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
                export OldBucketID=$(cat ~/textfile.txt)
                aws s3 rm "s3://${OldBucketID}" --recursive
    
  # # smoke test
  # smoke_test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run: apk add --update curl
  #     - run: 
  #         name: smoke test
  #         command: |
  #           URL="https://blog.udacity.com/"
  #           if curl -s --head ${URL}
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi

# Invoke jobs via workflows
workflows:
  push-to-production-workflow:
    jobs:
      # - create_infrastructure
      # - configure_infrastructure
      # - smoke_test
      - create_and_deploy_front_end
      - promote_to_production:
          requires: 
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
